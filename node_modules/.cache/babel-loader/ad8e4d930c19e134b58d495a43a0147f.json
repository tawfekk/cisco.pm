{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { deepmerge } from '@mui/utils';\nimport propsToClassKey from '../propsToClassKey';\nimport noopTheme from './noopTheme';\nexport default function getStylesCreator(stylesOrCreator) {\n  const themingEnabled = typeof stylesOrCreator === 'function';\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof stylesOrCreator !== 'object' && !themingEnabled) {\n      console.error(['MUI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\\n'));\n    }\n  }\n\n  return {\n    create: (theme, name) => {\n      let styles;\n\n      try {\n        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (themingEnabled === true && theme === noopTheme) {\n            // TODO: prepend error message/name instead\n            console.error(['MUI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n          }\n        }\n\n        throw err;\n      }\n\n      if (!name || !theme.components || !theme.components[name] || !theme.components[name].styleOverrides && !theme.components[name].variants) {\n        return styles;\n      }\n\n      const overrides = theme.components[name].styleOverrides || {};\n      const variants = theme.components[name].variants || [];\n\n      const stylesWithOverrides = _extends({}, styles);\n\n      Object.keys(overrides).forEach(key => {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!stylesWithOverrides[key]) {\n            console.warn(['MUI: You are trying to override a style that does not exist.', `Fix the \\`${key}\\` key of \\`theme.components.${name}.styleOverrides\\`.`, '', `If you intentionally wanted to add a new key, please use the theme.components[${name}].variants option.`].join('\\n'));\n          }\n        }\n\n        stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key] || {}, overrides[key]);\n      });\n      variants.forEach(definition => {\n        const classKey = propsToClassKey(definition.props);\n        stylesWithOverrides[classKey] = deepmerge(stylesWithOverrides[classKey] || {}, definition.style);\n      });\n      return stylesWithOverrides;\n    },\n    options: {}\n  };\n}","map":{"version":3,"sources":["/home/tawfek/code/node_modules/@mui/styles/getStylesCreator/getStylesCreator.js"],"names":["_extends","deepmerge","propsToClassKey","noopTheme","getStylesCreator","stylesOrCreator","themingEnabled","process","env","NODE_ENV","console","error","join","create","theme","name","styles","err","components","styleOverrides","variants","overrides","stylesWithOverrides","Object","keys","forEach","key","warn","definition","classKey","props","style","options"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { deepmerge } from '@mui/utils';\nimport propsToClassKey from '../propsToClassKey';\nimport noopTheme from './noopTheme';\nexport default function getStylesCreator(stylesOrCreator) {\n  const themingEnabled = typeof stylesOrCreator === 'function';\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof stylesOrCreator !== 'object' && !themingEnabled) {\n      console.error(['MUI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\\n'));\n    }\n  }\n\n  return {\n    create: (theme, name) => {\n      let styles;\n\n      try {\n        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;\n      } catch (err) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (themingEnabled === true && theme === noopTheme) {\n            // TODO: prepend error message/name instead\n            console.error(['MUI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n          }\n        }\n\n        throw err;\n      }\n\n      if (!name || !theme.components || !theme.components[name] || !theme.components[name].styleOverrides && !theme.components[name].variants) {\n        return styles;\n      }\n\n      const overrides = theme.components[name].styleOverrides || {};\n      const variants = theme.components[name].variants || [];\n\n      const stylesWithOverrides = _extends({}, styles);\n\n      Object.keys(overrides).forEach(key => {\n        if (process.env.NODE_ENV !== 'production') {\n          if (!stylesWithOverrides[key]) {\n            console.warn(['MUI: You are trying to override a style that does not exist.', `Fix the \\`${key}\\` key of \\`theme.components.${name}.styleOverrides\\`.`, '', `If you intentionally wanted to add a new key, please use the theme.components[${name}].variants option.`].join('\\n'));\n          }\n        }\n\n        stylesWithOverrides[key] = deepmerge(stylesWithOverrides[key] || {}, overrides[key]);\n      });\n      variants.forEach(definition => {\n        const classKey = propsToClassKey(definition.props);\n        stylesWithOverrides[classKey] = deepmerge(stylesWithOverrides[classKey] || {}, definition.style);\n      });\n      return stylesWithOverrides;\n    },\n    options: {}\n  };\n}"]},"metadata":{},"sourceType":"module"}