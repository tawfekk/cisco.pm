{"ast":null,"code":"var _jsxFileName = \"/home/tawfek/code/src/content/applications/Transactions/RecentOrdersTable.js\",\n    _s = $RefreshSig$();\n\nimport { FC, ChangeEvent, useState } from 'react';\nimport { format } from 'date-fns';\nimport numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport { Tooltip, Divider, Box, FormControl, InputLabel, Card, Checkbox, IconButton, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, TableContainer, Select, MenuItem, Typography, useTheme, CardHeader } from '@mui/material';\nimport Label from 'src/components/Label';\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\nimport DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\nimport BulkActions from './BulkActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getStatusLabel = cryptoOrderStatus => {\n  const map = {\n    failed: {\n      text: 'Failed',\n      color: 'error'\n    },\n    completed: {\n      text: 'Completed',\n      color: 'success'\n    },\n    pending: {\n      text: 'Pending',\n      color: 'warning'\n    }\n  };\n  const {\n    text,\n    color\n  } = map[cryptoOrderStatus];\n  return /*#__PURE__*/_jsxDEV(Label, {\n    color: color,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n\nconst applyFilters = (cryptoOrders, filters) => {\n  return cryptoOrders.filter(cryptoOrder => {\n    let matches = true;\n\n    if (filters.status && cryptoOrder.status !== filters.status) {\n      matches = false;\n    }\n\n    return matches;\n  });\n};\n\nconst applyPagination = (cryptoOrders, page, limit) => {\n  return cryptoOrders.slice(page * limit, page * limit + limit);\n};\n\nconst RecentOrdersTable = _ref => {\n  _s();\n\n  let {\n    cryptoOrders\n  } = _ref;\n  const [selectedCryptoOrders, setSelectedCryptoOrders] = useState([]);\n  const selectedBulkActions = selectedCryptoOrders.length > 0;\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(5);\n  const [filters, setFilters] = useState({\n    status: null\n  });\n  const statusOptions = [{\n    id: 'all',\n    name: 'All'\n  }, {\n    id: 'completed',\n    name: 'Completed'\n  }, {\n    id: 'pending',\n    name: 'Pending'\n  }, {\n    id: 'failed',\n    name: 'Failed'\n  }];\n\n  const handleStatusChange = e => {\n    let value = null;\n\n    if (e.target.value !== 'all') {\n      value = e.target.value;\n    }\n\n    setFilters(prevFilters => ({ ...prevFilters,\n      status: value\n    }));\n  };\n\n  const handleSelectAllCryptoOrders = event => {\n    setSelectedCryptoOrders(event.target.checked ? cryptoOrders.map(cryptoOrder => cryptoOrder.id) : []);\n  };\n\n  const handleSelectOneCryptoOrder = (event, cryptoOrderId) => {\n    if (!selectedCryptoOrders.includes(cryptoOrderId)) {\n      setSelectedCryptoOrders(prevSelected => [...prevSelected, cryptoOrderId]);\n    } else {\n      setSelectedCryptoOrders(prevSelected => prevSelected.filter(id => id !== cryptoOrderId));\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = event => {\n    setLimit(parseInt(event.target.value));\n  };\n\n  const filteredCryptoOrders = applyFilters(cryptoOrders, filters);\n  const paginatedCryptoOrders = applyPagination(filteredCryptoOrders, page, limit);\n  const selectedSomeCryptoOrders = selectedCryptoOrders.length > 0 && selectedCryptoOrders.length < cryptoOrders.length;\n  const selectedAllCryptoOrders = selectedCryptoOrders.length === cryptoOrders.length;\n  const theme = useTheme();\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [selectedBulkActions && /*#__PURE__*/_jsxDEV(Box, {\n      flex: 1,\n      p: 2,\n      children: /*#__PURE__*/_jsxDEV(BulkActions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }, this), !selectedBulkActions && /*#__PURE__*/_jsxDEV(CardHeader, {\n      action: /*#__PURE__*/_jsxDEV(Box, {\n        width: 150,\n        children: /*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          variant: \"outlined\",\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            value: filters.status || 'all',\n            onChange: handleStatusChange,\n            label: \"Status\",\n            autoWidth: true,\n            children: statusOptions.map(statusOption => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: statusOption.id,\n              children: statusOption.name\n            }, statusOption.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }, this),\n      title: \"Recent Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              padding: \"checkbox\",\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                color: \"primary\",\n                checked: selectedAllCryptoOrders,\n                indeterminate: selectedSomeCryptoOrders,\n                onChange: handleSelectAllCryptoOrders\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Order Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Order ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Source\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: paginatedCryptoOrders.map(cryptoOrder => {\n            const isCryptoOrderSelected = selectedCryptoOrders.includes(cryptoOrder.id);\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              selected: isCryptoOrderSelected,\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                padding: \"checkbox\",\n                children: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  color: \"primary\",\n                  checked: isCryptoOrderSelected,\n                  onChange: event => handleSelectOneCryptoOrder(event, cryptoOrder.id),\n                  value: isCryptoOrderSelected\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  fontWeight: \"bold\",\n                  color: \"text.primary\",\n                  gutterBottom: true,\n                  noWrap: true,\n                  children: cryptoOrder.orderDetails\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 228,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  noWrap: true,\n                  children: format(cryptoOrder.orderDate, 'MMMM dd yyyy')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 237,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  fontWeight: \"bold\",\n                  color: \"text.primary\",\n                  gutterBottom: true,\n                  noWrap: true,\n                  children: cryptoOrder.orderID\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  fontWeight: \"bold\",\n                  color: \"text.primary\",\n                  gutterBottom: true,\n                  noWrap: true,\n                  children: cryptoOrder.sourceName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  noWrap: true,\n                  children: cryptoOrder.sourceDesc\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: [/*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body1\",\n                  fontWeight: \"bold\",\n                  color: \"text.primary\",\n                  gutterBottom: true,\n                  noWrap: true,\n                  children: [cryptoOrder.amountCrypto, cryptoOrder.cryptoCurrency]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"body2\",\n                  color: \"text.secondary\",\n                  noWrap: true,\n                  children: numeral(cryptoOrder.amount).format(`${cryptoOrder.currency}0,0.00`)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 277,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: getStatusLabel(cryptoOrder.status)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: \"Edit Order\",\n                  arrow: true,\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    sx: {\n                      '&:hover': {\n                        background: theme.colors.primary.lighter\n                      },\n                      color: theme.palette.primary.main\n                    },\n                    color: \"inherit\",\n                    size: \"small\",\n                    children: /*#__PURE__*/_jsxDEV(EditTwoToneIcon, {\n                      fontSize: \"small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 298,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n                  title: \"Delete Order\",\n                  arrow: true,\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    sx: {\n                      '&:hover': {\n                        background: theme.colors.error.lighter\n                      },\n                      color: theme.palette.error.main\n                    },\n                    color: \"inherit\",\n                    size: \"small\",\n                    children: /*#__PURE__*/_jsxDEV(DeleteTwoToneIcon, {\n                      fontSize: \"small\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 310,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 302,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 301,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 286,\n                columnNumber: 19\n              }, this)]\n            }, cryptoOrder.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      p: 2,\n      children: /*#__PURE__*/_jsxDEV(TablePagination, {\n        component: \"div\",\n        count: filteredCryptoOrders.length,\n        onPageChange: handlePageChange,\n        onRowsPerPageChange: handleLimitChange,\n        page: page,\n        rowsPerPage: limit,\n        rowsPerPageOptions: [5, 10, 25, 30]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RecentOrdersTable, \"xJazv4jfZc45x0lzqssubWlRxWU=\", false, function () {\n  return [useTheme];\n});\n\n_c = RecentOrdersTable;\nRecentOrdersTable.propTypes = {\n  cryptoOrders: PropTypes.array.isRequired\n};\nRecentOrdersTable.defaultProps = {\n  cryptoOrders: []\n};\nexport default RecentOrdersTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecentOrdersTable\");","map":{"version":3,"sources":["/home/tawfek/code/src/content/applications/Transactions/RecentOrdersTable.js"],"names":["FC","ChangeEvent","useState","format","numeral","PropTypes","Tooltip","Divider","Box","FormControl","InputLabel","Card","Checkbox","IconButton","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","TableContainer","Select","MenuItem","Typography","useTheme","CardHeader","Label","EditTwoToneIcon","DeleteTwoToneIcon","BulkActions","getStatusLabel","cryptoOrderStatus","map","failed","text","color","completed","pending","applyFilters","cryptoOrders","filters","filter","cryptoOrder","matches","status","applyPagination","page","limit","slice","RecentOrdersTable","selectedCryptoOrders","setSelectedCryptoOrders","selectedBulkActions","length","setPage","setLimit","setFilters","statusOptions","id","name","handleStatusChange","e","value","target","prevFilters","handleSelectAllCryptoOrders","event","checked","handleSelectOneCryptoOrder","cryptoOrderId","includes","prevSelected","handlePageChange","newPage","handleLimitChange","parseInt","filteredCryptoOrders","paginatedCryptoOrders","selectedSomeCryptoOrders","selectedAllCryptoOrders","theme","statusOption","isCryptoOrderSelected","orderDetails","orderDate","orderID","sourceName","sourceDesc","amountCrypto","cryptoCurrency","amount","currency","background","colors","primary","lighter","palette","main","error","propTypes","array","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import { FC, ChangeEvent, useState } from 'react';\nimport { format } from 'date-fns';\nimport numeral from 'numeral';\nimport PropTypes from 'prop-types';\nimport {\n  Tooltip,\n  Divider,\n  Box,\n  FormControl,\n  InputLabel,\n  Card,\n  Checkbox,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TableContainer,\n  Select,\n  MenuItem,\n  Typography,\n  useTheme,\n  CardHeader\n} from '@mui/material';\n\nimport Label from 'src/components/Label';\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\nimport DeleteTwoToneIcon from '@mui/icons-material/DeleteTwoTone';\nimport BulkActions from './BulkActions';\n\nconst getStatusLabel = (cryptoOrderStatus) => {\n  const map = {\n    failed: {\n      text: 'Failed',\n      color: 'error'\n    },\n    completed: {\n      text: 'Completed',\n      color: 'success'\n    },\n    pending: {\n      text: 'Pending',\n      color: 'warning'\n    }\n  };\n\n  const { text, color } = map[cryptoOrderStatus];\n\n  return <Label color={color}>{text}</Label>;\n};\n\nconst applyFilters = (cryptoOrders, filters) => {\n  return cryptoOrders.filter((cryptoOrder) => {\n    let matches = true;\n\n    if (filters.status && cryptoOrder.status !== filters.status) {\n      matches = false;\n    }\n\n    return matches;\n  });\n};\n\nconst applyPagination = (cryptoOrders, page, limit) => {\n  return cryptoOrders.slice(page * limit, page * limit + limit);\n};\n\nconst RecentOrdersTable = ({ cryptoOrders }) => {\n\n  const [selectedCryptoOrders, setSelectedCryptoOrders] = useState([]);\n  const selectedBulkActions = selectedCryptoOrders.length > 0;\n  const [page, setPage] = useState(0);\n  const [limit, setLimit] = useState(5);\n  const [filters, setFilters] = useState({\n    status: null\n  });\n\n  const statusOptions = [\n    {\n      id: 'all',\n      name: 'All'\n    },\n    {\n      id: 'completed',\n      name: 'Completed'\n    },\n    {\n      id: 'pending',\n      name: 'Pending'\n    },\n    {\n      id: 'failed',\n      name: 'Failed'\n    }\n  ];\n\n  const handleStatusChange = (e) => {\n    let value = null;\n\n    if (e.target.value !== 'all') {\n      value = e.target.value;\n    }\n\n    setFilters((prevFilters) => ({\n      ...prevFilters,\n      status: value\n    }));\n  };\n\n  const handleSelectAllCryptoOrders = (event) => {\n    setSelectedCryptoOrders(\n      event.target.checked\n        ? cryptoOrders.map((cryptoOrder) => cryptoOrder.id)\n        : []\n    );\n  };\n\n  const handleSelectOneCryptoOrder = (event, cryptoOrderId) => {\n    if (!selectedCryptoOrders.includes(cryptoOrderId)) {\n      setSelectedCryptoOrders((prevSelected) => [\n        ...prevSelected,\n        cryptoOrderId\n      ]);\n    } else {\n      setSelectedCryptoOrders((prevSelected) =>\n        prevSelected.filter((id) => id !== cryptoOrderId)\n      );\n    }\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(parseInt(event.target.value));\n  };\n\n  const filteredCryptoOrders = applyFilters(cryptoOrders, filters);\n  const paginatedCryptoOrders = applyPagination(\n    filteredCryptoOrders,\n    page,\n    limit\n  );\n  const selectedSomeCryptoOrders =\n    selectedCryptoOrders.length > 0 &&\n    selectedCryptoOrders.length < cryptoOrders.length;\n  const selectedAllCryptoOrders =\n    selectedCryptoOrders.length === cryptoOrders.length;\n  const theme = useTheme();\n\n  return (\n    <Card>\n      {selectedBulkActions && (\n        <Box flex={1} p={2}>\n          <BulkActions />\n        </Box>\n      )}\n      {!selectedBulkActions && (\n        <CardHeader\n          action={\n            <Box width={150}>\n              <FormControl fullWidth variant=\"outlined\">\n                <InputLabel>Status</InputLabel>\n                <Select\n                  value={filters.status || 'all'}\n                  onChange={handleStatusChange}\n                  label=\"Status\"\n                  autoWidth\n                >\n                  {statusOptions.map((statusOption) => (\n                    <MenuItem key={statusOption.id} value={statusOption.id}>\n                      {statusOption.name}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Box>\n          }\n          title=\"Recent Orders\"\n        />\n      )}\n      <Divider />\n      <TableContainer>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell padding=\"checkbox\">\n                <Checkbox\n                  color=\"primary\"\n                  checked={selectedAllCryptoOrders}\n                  indeterminate={selectedSomeCryptoOrders}\n                  onChange={handleSelectAllCryptoOrders}\n                />\n              </TableCell>\n              <TableCell>Order Details</TableCell>\n              <TableCell>Order ID</TableCell>\n              <TableCell>Source</TableCell>\n              <TableCell align=\"right\">Amount</TableCell>\n              <TableCell align=\"right\">Status</TableCell>\n              <TableCell align=\"right\">Actions</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {paginatedCryptoOrders.map((cryptoOrder) => {\n              const isCryptoOrderSelected = selectedCryptoOrders.includes(\n                cryptoOrder.id\n              );\n              return (\n                <TableRow\n                  hover\n                  key={cryptoOrder.id}\n                  selected={isCryptoOrderSelected}\n                >\n                  <TableCell padding=\"checkbox\">\n                    <Checkbox\n                      color=\"primary\"\n                      checked={isCryptoOrderSelected}\n                      onChange={(event) =>\n                        handleSelectOneCryptoOrder(event, cryptoOrder.id)\n                      }\n                      value={isCryptoOrderSelected}\n                    />\n                  </TableCell>\n                  <TableCell>\n                    <Typography\n                      variant=\"body1\"\n                      fontWeight=\"bold\"\n                      color=\"text.primary\"\n                      gutterBottom\n                      noWrap\n                    >\n                      {cryptoOrder.orderDetails}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n                      {format(cryptoOrder.orderDate, 'MMMM dd yyyy')}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Typography\n                      variant=\"body1\"\n                      fontWeight=\"bold\"\n                      color=\"text.primary\"\n                      gutterBottom\n                      noWrap\n                    >\n                      {cryptoOrder.orderID}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Typography\n                      variant=\"body1\"\n                      fontWeight=\"bold\"\n                      color=\"text.primary\"\n                      gutterBottom\n                      noWrap\n                    >\n                      {cryptoOrder.sourceName}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n                      {cryptoOrder.sourceDesc}\n                    </Typography>\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    <Typography\n                      variant=\"body1\"\n                      fontWeight=\"bold\"\n                      color=\"text.primary\"\n                      gutterBottom\n                      noWrap\n                    >\n                      {cryptoOrder.amountCrypto}\n                      {cryptoOrder.cryptoCurrency}\n                    </Typography>\n                    <Typography variant=\"body2\" color=\"text.secondary\" noWrap>\n                      {numeral(cryptoOrder.amount).format(\n                        `${cryptoOrder.currency}0,0.00`\n                      )}\n                    </Typography>\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    {getStatusLabel(cryptoOrder.status)}\n                  </TableCell>\n                  <TableCell align=\"right\">\n                    <Tooltip title=\"Edit Order\" arrow>\n                      <IconButton\n                        sx={{\n                          '&:hover': {\n                            background: theme.colors.primary.lighter\n                          },\n                          color: theme.palette.primary.main\n                        }}\n                        color=\"inherit\"\n                        size=\"small\"\n                      >\n                        <EditTwoToneIcon fontSize=\"small\" />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Delete Order\" arrow>\n                      <IconButton\n                        sx={{\n                          '&:hover': { background: theme.colors.error.lighter },\n                          color: theme.palette.error.main\n                        }}\n                        color=\"inherit\"\n                        size=\"small\"\n                      >\n                        <DeleteTwoToneIcon fontSize=\"small\" />\n                      </IconButton>\n                    </Tooltip>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Box p={2}>\n        <TablePagination\n          component=\"div\"\n          count={filteredCryptoOrders.length}\n          onPageChange={handlePageChange}\n          onRowsPerPageChange={handleLimitChange}\n          page={page}\n          rowsPerPage={limit}\n          rowsPerPageOptions={[5, 10, 25, 30]}\n        />\n      </Box>\n    </Card>\n  );\n};\n\nRecentOrdersTable.propTypes = {\n  cryptoOrders: PropTypes.array.isRequired\n};\n\nRecentOrdersTable.defaultProps = {\n  cryptoOrders: []\n};\n\nexport default RecentOrdersTable;\n"]},"metadata":{},"sourceType":"module"}