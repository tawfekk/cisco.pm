[{"/home/tawfek/cisco.pm/src/index.js":"1","/home/tawfek/cisco.pm/src/App.js":"2","/home/tawfek/cisco.pm/src/serviceWorker.js":"3","/home/tawfek/cisco.pm/src/contexts/SidebarContext.js":"4","/home/tawfek/cisco.pm/src/utils/chart.js":"5","/home/tawfek/cisco.pm/src/router.js":"6","/home/tawfek/cisco.pm/src/theme/ThemeProvider.js":"7","/home/tawfek/cisco.pm/src/theme/base.js":"8","/home/tawfek/cisco.pm/src/layouts/SidebarLayout/index.js":"9","/home/tawfek/cisco.pm/src/components/SuspenseLoader/index.js":"10","/home/tawfek/cisco.pm/src/layouts/BaseLayout/index.js":"11","/home/tawfek/cisco.pm/src/content/overview/index.js":"12","/home/tawfek/cisco.pm/src/content/pages/Components/Tooltips/index.js":"13","/home/tawfek/cisco.pm/src/content/pages/Status/Status404/index.js":"14","/home/tawfek/cisco.pm/src/content/pages/Components/Accordions/index.js":"15","/home/tawfek/cisco.pm/src/content/pages/Status/ComingSoon/index.js":"16","/home/tawfek/cisco.pm/src/content/pages/Components/Tabs/index.js":"17","/home/tawfek/cisco.pm/src/theme/schemes/NebulaFighterTheme.js":"18","/home/tawfek/cisco.pm/src/content/overview/Hero/index.js":"19","/home/tawfek/cisco.pm/src/components/LogoSign/index.js":"20","/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Header/index.js":"21","/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Sidebar/index.js":"22","/home/tawfek/cisco.pm/src/components/Footer/index.js":"23","/home/tawfek/cisco.pm/src/components/PageTitleWrapper/index.js":"24","/home/tawfek/cisco.pm/src/components/PageTitle/index.js":"25","/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Sidebar/SidebarMenu/index.js":"26","/home/tawfek/cisco.pm/src/components/Logo/index.js":"27","/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Header/Buttons/index.js":"28","/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Header/Menu/index.js":"29","/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Sidebar/SidebarMenu/item.js":"30","/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Sidebar/SidebarMenu/items.js":"31"},{"size":564,"mtime":1634525262000,"results":"32","hashOfConfig":"33"},{"size":563,"mtime":1634525262000,"results":"34","hashOfConfig":"33"},{"size":5040,"mtime":1634525262000,"results":"35","hashOfConfig":"33"},{"size":426,"mtime":1634525262000,"results":"36","hashOfConfig":"33"},{"size":5562,"mtime":1634525262000,"results":"37","hashOfConfig":"33"},{"size":2066,"mtime":1651502635690,"results":"38","hashOfConfig":"33"},{"size":864,"mtime":1634525262000,"results":"39","hashOfConfig":"33"},{"size":178,"mtime":1634525262000,"results":"40","hashOfConfig":"33"},{"size":833,"mtime":1650568971508,"results":"41","hashOfConfig":"33"},{"size":522,"mtime":1634525262000,"results":"42","hashOfConfig":"33"},{"size":246,"mtime":1634525262000,"results":"43","hashOfConfig":"33"},{"size":785,"mtime":1650577766807,"results":"44","hashOfConfig":"33"},{"size":4033,"mtime":1651502825859,"results":"45","hashOfConfig":"33"},{"size":1010,"mtime":1650570684176,"results":"46","hashOfConfig":"33"},{"size":3080,"mtime":1651502799666,"results":"47","hashOfConfig":"33"},{"size":1853,"mtime":1650570273714,"results":"48","hashOfConfig":"33"},{"size":30160,"mtime":1651596134576,"results":"49","hashOfConfig":"33"},{"size":28280,"mtime":1651433346637,"results":"50","hashOfConfig":"33"},{"size":3564,"mtime":1651356679235,"results":"51","hashOfConfig":"33"},{"size":1991,"mtime":1634525262000,"results":"52","hashOfConfig":"33"},{"size":1758,"mtime":1650569155704,"results":"53","hashOfConfig":"33"},{"size":2017,"mtime":1634525262000,"results":"54","hashOfConfig":"33"},{"size":960,"mtime":1650577843641,"results":"55","hashOfConfig":"33"},{"size":540,"mtime":1634525262000,"results":"56","hashOfConfig":"33"},{"size":810,"mtime":1651358275005,"results":"57","hashOfConfig":"33"},{"size":4948,"mtime":1634525262000,"results":"58","hashOfConfig":"33"},{"size":2920,"mtime":1650578040570,"results":"59","hashOfConfig":"33"},{"size":208,"mtime":1651502721610,"results":"60","hashOfConfig":"33"},{"size":3380,"mtime":1651356963200,"results":"61","hashOfConfig":"33"},{"size":1936,"mtime":1634525262000,"results":"62","hashOfConfig":"33"},{"size":1753,"mtime":1651502685680,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"12zquc4",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"66"},"/home/tawfek/cisco.pm/src/index.js",[],["132","133"],"/home/tawfek/cisco.pm/src/App.js",[],"/home/tawfek/cisco.pm/src/serviceWorker.js",[],"/home/tawfek/cisco.pm/src/contexts/SidebarContext.js",[],"/home/tawfek/cisco.pm/src/utils/chart.js",[],"/home/tawfek/cisco.pm/src/router.js",[],"/home/tawfek/cisco.pm/src/theme/ThemeProvider.js",[],"/home/tawfek/cisco.pm/src/theme/base.js",[],"/home/tawfek/cisco.pm/src/layouts/SidebarLayout/index.js",[],"/home/tawfek/cisco.pm/src/components/SuspenseLoader/index.js",[],"/home/tawfek/cisco.pm/src/layouts/BaseLayout/index.js",[],"/home/tawfek/cisco.pm/src/content/overview/index.js",[],"/home/tawfek/cisco.pm/src/content/pages/Components/Tooltips/index.js",[],"/home/tawfek/cisco.pm/src/content/pages/Status/Status404/index.js",["134","135","136","137","138","139","140"],"import {\n  Box,\n  Card,\n  Typography,\n  Container,\n  Divider,\n  Button,\n  FormControl,\n  OutlinedInput,\n  InputAdornment\n} from '@mui/material';\nimport { Helmet } from 'react-helmet-async';\nimport SearchTwoToneIcon from '@mui/icons-material/SearchTwoTone';\nimport { styled } from '@mui/material/styles';\n\nconst MainContent = styled(Box)(\n  ({ theme }) => `\n    height: 100%;\n    display: flex;\n    flex: 1;\n    overflow: auto;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`\n);\n\nfunction Status404() {\n\n\n  return (\n    <>\n      <Helmet>\n        <title>Status - 404</title>\n      </Helmet>\n      <MainContent>\n        <Container maxWidth=\"md\">\n          <Box textAlign=\"center\">\n            <img alt=\"404\" height={180} src=\"/static/images/status/404.svg\" />\n            <Typography variant=\"h2\" sx={{ my: 2 }}>\n              Siden eksisterer ikke.\n            </Typography>\n          </Box>\n        </Container>\n      </MainContent>\n    </>\n  );\n}\n\nexport default Status404;\n","/home/tawfek/cisco.pm/src/content/pages/Components/Accordions/index.js",[],"/home/tawfek/cisco.pm/src/content/pages/Status/ComingSoon/index.js",["141","142","143","144","145","146","147","148","149","150","151","152"],"import { useEffect, useState } from 'react';\nimport {\n  Box,\n  Typography,\n  Container,\n  Divider,\n  OutlinedInput,\n  IconButton,\n  Tooltip,\n  FormControl,\n  InputAdornment,\n  Button,\n  FormHelperText\n} from '@mui/material';\nimport { Helmet } from 'react-helmet-async';\nimport Logo from 'src/components/LogoSign';\n\nimport { styled } from '@mui/material/styles';\nconst MainContent = styled(Box)(\n  () => `\n    height: 100%;\n    display: flex;\n    flex: 1;\n    overflow: auto;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n`\n);\n\nconst TypographyH1 = styled(Typography)(\n  ({ theme }) => `\n  font-size: ${theme.typography.pxToRem(75)};\n`\n);\n\nconst TypographyH3 = styled(Typography)(\n  ({ theme }) => `\n  color: ${theme.colors.alpha.black[50]};\n`\n);\n\nconst OutlinedInputWrapper = styled(OutlinedInput)(\n  ({ theme }) => `\n    background-color: ${theme.colors.alpha.white[100]};\n`\n);\n\nfunction StatusComingSoon() {\n  return (\n    <>\n      <Helmet>\n        <title>Status - Coming Soon</title>\n      </Helmet>\n      <MainContent>\n        <Container maxWidth=\"md\">\n          <Logo />\n          <Box textAlign=\"center\" mb={3}>\n            <Container maxWidth=\"xs\">\n              <Typography variant=\"h1\" sx={{ mt: 4, mb: 2 }}>\n                Kommer snart\n              </Typography>\n              <Typography\n                variant=\"h3\"\n                color=\"text.secondary\"\n                fontWeight=\"normal\"\n                sx={{ mb: 4 }}\n              >\n                Denne funktion er ikke helt klar endnu\n              </Typography>\n            </Container>\n            <img\n              alt=\"Coming Soon\"\n              height={200}\n              src=\"/static/images/status/coming-soon.svg\"\n            />\n          </Box>\n        </Container>\n      </MainContent>\n    </>\n  );\n}\n\nexport default StatusComingSoon;\n","/home/tawfek/cisco.pm/src/content/pages/Components/Tabs/index.js",["153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172"]," import { Helmet } from 'react-helmet-async';\nimport PageTitle from 'src/components/PageTitle';\nimport PageTitleWrapper from 'src/components/PageTitleWrapper';\nimport { TextareaAutosize, Paper, IconButton, FormControlLabel, Checkbox, Dialog, DialogTitle, Alert, Button, Container, Grid, Card, CardHeader, CardContent, Divider } from '@mui/material';\nimport { useState } from 'react';\n\nimport Tabs from '@mui/material/Tabs';\nimport Tab from '@mui/material/Tab';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport Footer from 'src/components/Footer';\nimport Input from '@mui/material/Input';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\nimport Chip from '@mui/material/Chip';\nimport OutlinedInput from '@mui/material/OutlinedInput';\nimport * as React from 'react';\nimport Modal from '@mui/material/Modal';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\n\nimport TextField from '@mui/material/TextField';\nfunction Forms() {\n\n  const [currency, setCurrency] = useState('EUR');\n\n  const handleChange = (event) => {\n    setCurrency(event.target.value);\n  };\n\n  const [value, setValue] = useState(30);\n\n  const handleChange2 = (event, newValue) => {\n    setValue(newValue);\n  };\n}\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\n\n\nfunction TabsDemo() {\n\n  const porte = [\n    \"gi0/0\",\n    \"gi0/1\",\n    \"port-channel 1\"\n  ];\n\n\n\n\n  const [value, setValue] = useState(0);\n\n//  const handleChange = (event, newValue) => {\n//    setValue(newValue);\n//  };\n\n//  const [Hostname, setHostname] = useState(localStorage.router_initial_hostname_input);\n//  const [Hostname, setHostname] = useState(localStorage.router_initial_hostname_input);\n//  const [Hostname, setHostname] = useState(localStorage.router_initial_hostname_input);\n//  const [Hostname, setHostname] = useState(localStorage.router_initial_hostname_input);\n//  const [Hostname, setHostname] = useState(localStorage.router_initial_hostname_input);\n\nconst [open, setOpen] = React.useState(false);\nconst handleOpen = () => setOpen(true);\nconst handleClose = () => setOpen(false);\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  boxShadow: 24,\n  p: 4,\n};\nconst styles = {\n  input: {\n    \"&:invalid\": {\n      border: \"red solid 2px\"\n    }\n  }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//const Initial_hostname = () => {try{return JSON.parse(localStorage.router_array)[0]['initial'].hostname}catch(error){}}\n\n\n\n\n\n\n\nconst [formFields, setFormFields] = useState(\n  [\n  {\n    interfaces: [ { porte:[] } ],\n    initial:[ {} ]\n  }\n  ]\n)\n\nconst handleFormChange = (event, index) => {\n  let data = [...formFields]\n  //if (data[0][event.target.id][index] == undefined) {data[0][event.target.id] = {}}\n  data[0][event.target.id][index][event.target.name] = event.target.value;\n  setFormFields(data);\n  localStorage.router_array = JSON.stringify(data)\n}\n\nconst submit = (e) => {\n  e.preventDefault();\n  console.log(formFields)\n}\n\nconst addFields = () => {\n  let data = [...formFields]\n  let object = {\n    porte:[]\n  }\n  data[0]['interfaces'].push(object)\n  //workingarray = formFields\n  setFormFields(data)\n  //localStorage.router_array = JSON.stringify(data)\n\n}\n\nconst removeFields = (id, index) => {\n    let data = [...formFields];\n    data[0][id].splice(index, 1);\n    setFormFields(data);\n    localStorage.router_array = JSON.stringify(data)\n}\n\n\n\n\n\n\n\n\n\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\n\n\n\nconst DHCP = () => {\n\n  try{\n\n  var workingvar = \"\"\n  if (localStorage.getItem('router_array')){\n  for (const element of JSON.parse(localStorage.router_array)[0]['dhcp']){\n  workingvar += \"\\nservice dhcp \\nip dhcp pool \\\"\" + element.navn+\"\\\"\"+\"\\nnetwork \"+element.ip +\" \"+element.subnet+\"\\ndefault-router \"+element.gateway\n  \tif (element.domæne != \"\") {workingvar +=  \"\\ndomain-name \"+element.domæne}\n  \tif (element.DNS != \"\") {workingvar +=  \"\\ndns-server \"+element.DNS}\n  \tworkingvar += \"\\nexit\"\n  \t//for (const elem of Input29.text.replace(\"-\", \" \").split(\"+\")){workingvar += \"\\nip dhcp excluded-address \"+elem}\n}}\n    localStorage.router_DHCP_final = workingvar ; return workingvar\n      }catch(error){}\n  }\n\nconst Interfaces = () => {\n\n  try{\n\n  var workingvar = \"\"\n  if (localStorage.getItem('router_array')){\n  for (const element of JSON.parse(localStorage.router_array[0]['interfaces'])){\n      workingvar += \"\\ninterface range \"+element.porte.toString()+\"\\nip address \"+element.ip +\" \"+element.subnet\n  \t\tif(element.description != \"\" && element.description != undefined) {workingvar += \"\\ndescription \"+element.description}\n  \t\tworkingvar += \"\\nexit\"\n  }}\n    localStorage.router_interfaces_final = workingvar ; return workingvar\n\n  }catch(error){}\n}\n\n\nconst Start = () => {\n\ntry{\n\nif (localStorage.getItem('router_array')) {\n\n\t\tvar today = new Date()\n\t\tvar workingvar = \"\"\n    var workingarr = JSON.parse(localStorage.router_array)[0]['initial'][0]\n    if (true == true) {workingvar += \"clock set \" + today.getHours()+\":\"+today.getMinutes()+\":\"+today.getSeconds()+\" \"+today.getDate()+\" \"+today.toLocaleString('en-us', { month: 'short' })+\" \"+today.getFullYear()}\n    workingvar +=  \"\\nconfigure terminal\"\n    workingvar += \"\\nset hostname \" + workingarr.hostname\n    localStorage.router_initial_final = workingvar; return workingvar\n}\n}catch(error){}\n}\n\n\n\n  return (\n    <>\n      <Helmet>\n        <title>Router</title>\n      </Helmet>\n      <PageTitleWrapper>\n        <PageTitle\n          heading=\"Router\"\n //subHeading=\"Rouer konfiguration.\"\n          />\n      </PageTitleWrapper>\n      <Container maxWidth=\"lg\">\n        <Grid\n          container\n          direction=\"row\"\n          justifyContent=\"center\"\n          alignItems=\"stretch\"\n          spacing={3}\n        >\n          <Grid item xs={12}>\n                <Box sx={{ width: '100%' }}>\n                  <Tabs variant=\"scrollable\"\n                    scrollButtons=\"auto\"\n                    textColor=\"primary\"\n                    indicatorColor=\"primary\" value={value} onChange={(event, newValue) => {setValue(newValue); if (localStorage.getItem('router_array')){setFormFields(JSON.parse(localStorage.router_array))} }} aria-label=\"basic tabs example\">\n                    <Tab label=\"Initial settings\" {...a11yProps(0)} />\n                    <Tab label=\"Interfaces\" {...a11yProps(1)} />\n                    <Tab label=\"Item Three\" {...a11yProps(2)} />\n                    <Tab label=\"Item Four\" {...a11yProps(3)} />\n                  </Tabs>\n                  <TabPanel value={value} index={0}>\n                    <Card>\n                    <CardHeader title=\"Basale router indstillinger\" />\n                    <Divider />\n                    <CardContent>\n                  <Box\n                    component=\"form\"\n                    sx={{\n                    '& .MuiTextField-root': { m: 1, width: '25ch' },\n                    }}\n                    noValidate\n                    autoComplete=\"off\"\n                  >\n                  {formFields[0]['initial'].map((form, index) => {\n                    return (\n                    <div key={0}>\n                      <TextField\n                        required\n                        id=\"initial\"\n                        name=\"hostname\"\n                        label=\"Hostname\"\n                        value = {form.hostname}\n                        placeholder=\"R1\"\n                        onChange={(event) => handleFormChange(event, 0)}\n\n                      />\n                      <TextField\n                        id=\"initial\"\n                        name=\"motd\"\n                        label=\"MOTD\"\n                        value = {form.motd}\n                        placeholder=\"Authorized access only!\"\n                        onChange={(event) => handleFormChange(event, 0)}\n                      />\n                      <TextField\n                        id=\"initial\"\n                        label=\"Domæne\"\n                        name=\"domæne\"\n                        value = {form.domæne}\n                        placeholder=\"domain.internal\"\n                        onChange={(event) => handleFormChange(event, 0)}\n                      />\n                      <TextField\n                        id=\"initial\"\n                        name=\"secret\"\n                        label=\"Enable secret\"\n                        value = {form.secret}\n                        placeholder=\"class\"\n                        onChange={(event) => handleFormChange(event, 0)}\n                      />\n                      <TextField\n                        id=\"initial\"\n                        value = {form.con0pass}\n                        name=\"con0pass\"\n                        label=\"Con 0 password\"\n                        placeholder=\"cisco\"\n                        onChange={(event) => handleFormChange(event, 0)}\n                      />\n                      <TextField\n                        id=\"initial\"\n                        name=\"vtypass\"\n                        value = {form.vtypass}\n                        label=\"Vty 0-15 password\"\n                        placeholder=\"cisco\"\n                        onChange={(event) => handleFormChange(event, 0)}\n                      />\n                    </div>\n                  )\n                })}\n                        <Divider sx={{m: 2}} />\n                        <Button variant=\"outlined\" color=\"error\" sx={{ margin: 1 }} size=\"medium\" onClick={() => {removeFields('initial', 0); window.location.reload()}}\n                        >\n                          Ryd felter\n                        </Button>\n                    <Button onClick={handleOpen} variant=\"outlined\" sx={{ margin: 1 }} size=\"medium\" color=\"primary\">\n                      Vis config\n                    </Button>\n\n                      <Modal\n                          open={open}\n                          onClose={handleClose}\n                          aria-labelledby=\"modal-modal-title\"\n                          aria-describedby=\"modal-modal-description\"\n                          >\n                          <Box sx={style}>\n                          <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">Konfig genereret</Typography>\n                              <TextField\n                                    multiline\n                                    sx={{  mt: 2 }}\n                                    inputProps={{ style: { color: \"#FFC13D\" } }}\n                                    maxRows={Infinity}\n                                    rows={5}\n                                    style={{width: '100%'}}\n                                    id=\"modal-modal-description\"\n                                    value= {Start()}>\n                              </TextField>\n                          <Button onClick={() => {navigator.clipboard.writeText(localStorage.router_initial_final)}} variant=\"contained\" sx={{right: '20%',left: '20%', margin: 2 }} size=\"small\" color=\"secondary\">\n                            Kopier til udklipsholder\n                          </Button>\n                          </Box>\n                      </Modal>\n                  </Box>\n                  </CardContent>\n                  </Card>\n                  </TabPanel>\n                  <TabPanel value={value} index={1}>\n                                        <Card sx={{ width: '100%' }}>\n                                        <CardHeader title=\"Interfaces\" />\n                                        <Divider />\n                                        <CardContent>\n                                                        {formFields[0]['interfaces'].map((form, index) => {\n                                                          return (\n                                                            <div key={index}>\n                                                              <Box// sx={{ width: '100%' }}\n                                                              sx={{\n                                                              '& .MuiTextField-root': { m: 1, width: '25ch' },\n                                                              }}\n                                                              autoComplete=\"off\">\n                                                              <TextField\n                                                                name='ip'\n                                                                label=\"IP\"\n                                                                id=\"interfaces\"\n                                                                placeholder=\"192.168.1.1\"\n                                                                onChange={event => handleFormChange(event, index)}\n                                                                value={form.ip}\n                                                              />\n                                                              <TextField\n                                                                name='subnet'\n                                                                id=\"interfaces\"\n                                                                label=\"Subnet\"\n                                                                placeholder='255.255.255.0'\n                                                                onChange={event => handleFormChange(event, index)}\n                                                                value={form.subnet}\n                                                              />\n                                                              <TextField\n                                                                name='description'\n                                                                id=\"interfaces\"\n                                                                label=\"Description\"\n                                                                placeholder='portbeskrivelse'\n                                                                onChange={event => handleFormChange(event, index)}\n                                                                value={form.description}\n                                                              />\n                                                              <FormControl sx={{ m: 1, width: 220 }}>\n                                                                                                <InputLabel id=\"interfaces\">\n                                                                                                  Porte\n                                                                                                </InputLabel>\n                                                                                                <Select\n                                                                                                  name='porte'\n                                                                                                  id=\"interfaces\"\n                                                                                                  multiple\n                                                                                                  value={form.porte}\n                                                                                                  onChange={(event) =>\n                                                                                                    handleFormChange(event, index)\n                                                                                                  }\n                                                                                                  input={\n                                                                                                    <OutlinedInput\n                                                                                                      id=\"select-multiple-chip\"\n                                                                                                      label=\"Chip\"\n                                                                                                    />\n                                                                                                  }\n                                                                                                  renderValue={(selected) => (\n                                                                                                    <Box\n                                                                                                      sx={{\n                                                                                                        display: 'flex',\n                                                                                                        flexWrap: 'wrap',\n                                                                                                        gap: 0.5\n                                                                                                      }}\n                                                                                                    >\n                                                                                                      {selected.map((value) => (\n                                                                                                        <Chip key={value} label={value} />\n                                                                                                      ))}\n                                                                                                    </Box>\n                                                                                                  )}\n                                                                                                  MenuProps={MenuProps}\n                                                                                                >\n                                                                                                  {porte.map((name) => (\n                                                                                                    <MenuItem key={name} value={name}>\n                                                                                                      {name}\n                                                                                                    </MenuItem>\n                                                                                                  ))}\n                                                                                                </Select>\n                                                                                              </FormControl>\n                                                                                              <FormControlLabel control={<Checkbox sx={{ margin: 1.7, left: '10%'}}\n                                                                                                  color=\"warning\"\n                                                                                                  name='shutdown'\n                                                                                                  id=\"interfaces\"\n                                                                                                  checked={form.shutdown}\n                                                                                                  onChange={(event) =>\n                                                                                                    handleFormChange(event, index)\n                                                                                                  }\n                                                                                                />} label=\"Shutdown\" />\n                                                                                                  <IconButton onClick={() => removeFields('interfaces',index)}>\n                                                                                                  <DeleteIcon color=\"secondary\"  />\n                                                                                                  </IconButton>\n                                                              <Divider sx={{m: 2}} />\n                                                              </Box>\n                                                            </div>\n                                                          )\n                                                        })}\n                                                      <Button variant=\"contained\" sx={{ margin: 1 }} size=\"medium\" color=\"primary\" onClick={addFields}>Tilføj interface</Button>\n                                                      <Button variant=\"outlined\" onClick={handleOpen}>Vis config</Button>\n                                                      <Modal\n                                                          open={open}\n                                                          onClose={handleClose}\n                                                          aria-labelledby=\"modal-modal-title\"\n                                                          aria-describedby=\"modal-modal-description\"\n                                                          >\n                                                          <Box sx={style}>\n                                                          <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">Konfig genereret</Typography>\n                                                              <TextField\n                                                                    multiline\n                                                                    sx={{  mt: 2 }}\n                                                                    inputProps={{ style: { color: \"#FFC13D\" } }}\n                                                                    maxRows={Infinity}\n                                                                    rows={5}\n                                                                    style={{width: '100%'}}\n                                                                    id=\"modal-modal-description\"\n                                                                    value= {\"conf terminal\"+Interfaces()+\"\\nend\"}>\n                                                              </TextField>\n                                                          <Button onClick={() => {navigator.clipboard.writeText(localStorage.router_interfaces_final)}} variant=\"contained\" sx={{right: '20%',left: '20%', margin: 2 }} size=\"small\" color=\"secondary\">\n                                                            Kopier til udklipsholder\n                                                          </Button>\n                                                          </Box>\n                                                      </Modal>\n                                                      </CardContent>\n                                                  </Card>\n                  </TabPanel>\n                  <TabPanel value={value} index={2}>\n                    Item Three\n                  </TabPanel>\n                  <TabPanel value={value} index={3}>\n                  <Card sx={{ width: '100%' }}>\n                  <CardHeader title=\"DHCP\" />\n                  <Divider />\n                  <CardContent>\n                                  {formFields.map((form, index) => {\n                                    return (\n                                      <div key={index}>\n                                        <Box// sx={{ width: '100%' }}\n                                        sx={{\n                                        '& .MuiTextField-root': { m: 1, width: '25ch' },\n                                        }}\n                                        autoComplete=\"off\">\n                                        <TextField\n                                          name='navn'\n                                          id=\"dhcp\"\n                                          label=\"Pool navn\"\n                                          placeholder='pool1'\n                                          onChange={event => handleFormChange(event, index)}\n                                          value={form.navn}\n                                        />\n                                        <TextField\n                                          name='ip'\n                                          id='dhcp'\n                                          label=\"Netværk\"\n                                          placeholder=\"192.168.1.0\"\n                                          onChange={event => handleFormChange(event, index)}\n                                          value={form.ip}\n                                        />\n                                        <TextField\n                                          name='subnet'\n                                          id='dhcp'\n                                          label=\"Subnet\"\n                                          placeholder='255.255.255.0'\n                                          onChange={event => handleFormChange(event, index)}\n                                          value={form.subnet}\n                                        />\n                                        <TextField\n                                          name='gateway'\n                                          label=\"Gateway\"\n                                          id='dhcp'\n                                          placeholder='192.168.1.1'\n                                          onChange={event => handleFormChange(event, index)}\n                                          value={form.gateway}\n                                        />\n                                        <TextField\n                                          name='domæne'\n                                          label=\"Domæne\"\n                                          id='dhcp'\n                                          placeholder='domain.internal'\n                                          onChange={event => handleFormChange(event, index)}\n                                          value={form.domæne}\n                                        />\n                                        <TextField\n                                          name='DNS'\n                                          id='dhcp'\n                                          label=\"DNS\"\n                                          placeholder='1.1.1.1'\n                                          onChange={event => handleFormChange(event, index)}\n                                          value={form.DNS}\n                                        />\n                                        <IconButton onClick={() => removeFields(index, 'dhcp')}>\n                                        <DeleteIcon color=\"secondary\" />\n                                        </IconButton>\n                                        <Divider sx={{m: 2}} />\n                                        </Box>\n                                      </div>\n                                    )\n                                  })}\n                                <Button variant=\"outlined\" sx={{ margin: 1 }} size=\"medium\" color=\"primary\" onClick={addFields}>Tilføj pool</Button>\n                                <Button variant=\"contained\" onClick={handleOpen}>Vis config</Button>\n                                <Modal\n                                    open={open}\n                                    onClose={handleClose}\n                                    aria-labelledby=\"modal-modal-title\"\n                                    aria-describedby=\"modal-modal-description\"\n                                    >\n                                    <Box sx={style}>\n                                    <Typography id=\"modal-modal-title\" variant=\"h4\" component=\"h2\">Konfig genereret</Typography>\n                                        <TextField\n                                              multiline\n                                              sx={{  mt: 2 }}\n                                              inputProps={{ style: { color: \"#FFC13D\" } }}\n                                              maxRows={Infinity}\n                                              rows={5}\n                                              style={{width: '100%'}}\n                                              id=\"modal-modal-description\"\n                                              value= {\"conf terminal\"+DHCP()+\"\\nend\"}>\n                                        </TextField>\n                                    <Button onClick={() => {navigator.clipboard.writeText(localStorage.router_DHCP_final)}} variant=\"contained\" sx={{right: '20%',left: '20%', margin: 2 }} size=\"small\" color=\"secondary\">\n                                      Kopier til udklipsholder\n                                    </Button>\n                                    </Box>\n                                </Modal>\n                                </CardContent>\n                            </Card>\n                  </TabPanel>\n                </Box>\n\n\n          </Grid>\n        </Grid>\n      </Container>\n      <Footer />\n    </>\n  );\n}\n\nexport default TabsDemo;\n","/home/tawfek/cisco.pm/src/theme/schemes/NebulaFighterTheme.js",[],"/home/tawfek/cisco.pm/src/content/overview/Hero/index.js",[],"/home/tawfek/cisco.pm/src/components/LogoSign/index.js",[],"/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Header/index.js",[],"/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Sidebar/index.js",[],"/home/tawfek/cisco.pm/src/components/Footer/index.js",[],"/home/tawfek/cisco.pm/src/components/PageTitleWrapper/index.js",[],"/home/tawfek/cisco.pm/src/components/PageTitle/index.js",["173","174"],"import PropTypes from 'prop-types';\nimport AddTwoToneIcon from '@mui/icons-material/AddTwoTone';\nimport { Typography, Button, Grid } from '@mui/material';\n\nconst PageTitle = ({\n    heading = '',\n    subHeading = '',\n    docs = '',\n    ...rest\n}) => {\n    return (\n        <Grid container justifyContent=\"space-between\" alignItems=\"center\" {...rest}>\n            <Grid item>\n                <Typography variant=\"h3\" component=\"h3\" gutterBottom>\n                    {heading}\n                </Typography>\n                <Typography variant=\"subtitle2\">\n                    {subHeading}\n                </Typography>\n            </Grid>\n        </Grid>\n    );\n};\n\nPageTitle.propTypes = {\n    heading: PropTypes.string,\n    subHeading: PropTypes.string,\n    docs: PropTypes.string,\n};\n\nexport default PageTitle;\n","/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Sidebar/SidebarMenu/index.js",[],"/home/tawfek/cisco.pm/src/components/Logo/index.js",[],"/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Header/Buttons/index.js",[],"/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Header/Menu/index.js",[],"/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Sidebar/SidebarMenu/item.js",[],"/home/tawfek/cisco.pm/src/layouts/SidebarLayout/Sidebar/SidebarMenu/items.js",["175","176","177","178","179","180","181","182","183","184","185","186"],"import DesignServicesTwoToneIcon from '@mui/icons-material/DesignServicesTwoTone';\nimport BrightnessLowTwoToneIcon from '@mui/icons-material/BrightnessLowTwoTone';\nimport MmsTwoToneIcon from '@mui/icons-material/MmsTwoTone';\nimport TableChartTwoToneIcon from '@mui/icons-material/TableChartTwoTone';\nimport AccountCircleTwoToneIcon from '@mui/icons-material/AccountCircleTwoTone';\nimport BallotTwoToneIcon from '@mui/icons-material/BallotTwoTone';\nimport BeachAccessTwoToneIcon from '@mui/icons-material/BeachAccessTwoTone';\nimport EmojiEventsTwoToneIcon from '@mui/icons-material/EmojiEventsTwoTone';\nimport FilterVintageTwoToneIcon from '@mui/icons-material/FilterVintageTwoTone';\nimport HowToVoteTwoToneIcon from '@mui/icons-material/HowToVoteTwoTone';\nimport LocalPharmacyTwoToneIcon from '@mui/icons-material/LocalPharmacyTwoTone';\nimport RedeemTwoToneIcon from '@mui/icons-material/RedeemTwoTone';\nimport SettingsTwoToneIcon from '@mui/icons-material/SettingsTwoTone';\nimport TrafficTwoToneIcon from '@mui/icons-material/TrafficTwoTone';\nimport VerifiedUserTwoToneIcon from '@mui/icons-material/VerifiedUserTwoTone';\n\nconst menuItems = [\n//  {\n//    heading: '',\n//    items: [\n//      {\n//        name: 'Overview',\n//        link: '/overview',\n//        icon: DesignServicesTwoToneIcon\n//      }\n//    ]\n//  },\n  {\n    heading: 'Menu',\n    items: [\n      {\n        name: 'Accordions',\n        icon: EmojiEventsTwoToneIcon,\n        link: '/components/accordions'\n      },\n      {\n        name: 'Router',\n        icon: FilterVintageTwoToneIcon,\n        link: '/components/tabs'\n      },\n      {\n        name: 'Tooltips',\n        icon: LocalPharmacyTwoToneIcon,\n        link: '/components/tooltips'\n      },\n    ]\n  },\n];\n\nexport default menuItems;\n",{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":3,"column":3,"nodeType":"193","messageId":"194","endLine":3,"endColumn":7},{"ruleId":"191","severity":1,"message":"195","line":6,"column":3,"nodeType":"193","messageId":"194","endLine":6,"endColumn":10},{"ruleId":"191","severity":1,"message":"196","line":7,"column":3,"nodeType":"193","messageId":"194","endLine":7,"endColumn":9},{"ruleId":"191","severity":1,"message":"197","line":8,"column":3,"nodeType":"193","messageId":"194","endLine":8,"endColumn":14},{"ruleId":"191","severity":1,"message":"198","line":9,"column":3,"nodeType":"193","messageId":"194","endLine":9,"endColumn":16},{"ruleId":"191","severity":1,"message":"199","line":10,"column":3,"nodeType":"193","messageId":"194","endLine":10,"endColumn":17},{"ruleId":"191","severity":1,"message":"200","line":13,"column":8,"nodeType":"193","messageId":"194","endLine":13,"endColumn":25},{"ruleId":"191","severity":1,"message":"201","line":1,"column":10,"nodeType":"193","messageId":"194","endLine":1,"endColumn":19},{"ruleId":"191","severity":1,"message":"202","line":1,"column":21,"nodeType":"193","messageId":"194","endLine":1,"endColumn":29},{"ruleId":"191","severity":1,"message":"195","line":6,"column":3,"nodeType":"193","messageId":"194","endLine":6,"endColumn":10},{"ruleId":"191","severity":1,"message":"203","line":8,"column":3,"nodeType":"193","messageId":"194","endLine":8,"endColumn":13},{"ruleId":"191","severity":1,"message":"204","line":9,"column":3,"nodeType":"193","messageId":"194","endLine":9,"endColumn":10},{"ruleId":"191","severity":1,"message":"197","line":10,"column":3,"nodeType":"193","messageId":"194","endLine":10,"endColumn":14},{"ruleId":"191","severity":1,"message":"199","line":11,"column":3,"nodeType":"193","messageId":"194","endLine":11,"endColumn":17},{"ruleId":"191","severity":1,"message":"196","line":12,"column":3,"nodeType":"193","messageId":"194","endLine":12,"endColumn":9},{"ruleId":"191","severity":1,"message":"205","line":13,"column":3,"nodeType":"193","messageId":"194","endLine":13,"endColumn":17},{"ruleId":"191","severity":1,"message":"206","line":31,"column":7,"nodeType":"193","messageId":"194","endLine":31,"endColumn":19},{"ruleId":"191","severity":1,"message":"207","line":37,"column":7,"nodeType":"193","messageId":"194","endLine":37,"endColumn":19},{"ruleId":"191","severity":1,"message":"208","line":43,"column":7,"nodeType":"193","messageId":"194","endLine":43,"endColumn":27},{"ruleId":"191","severity":1,"message":"209","line":4,"column":10,"nodeType":"193","messageId":"194","endLine":4,"endColumn":26},{"ruleId":"191","severity":1,"message":"210","line":4,"column":28,"nodeType":"193","messageId":"194","endLine":4,"endColumn":33},{"ruleId":"191","severity":1,"message":"211","line":4,"column":75,"nodeType":"193","messageId":"194","endLine":4,"endColumn":81},{"ruleId":"191","severity":1,"message":"212","line":4,"column":83,"nodeType":"193","messageId":"194","endLine":4,"endColumn":94},{"ruleId":"191","severity":1,"message":"213","line":4,"column":96,"nodeType":"193","messageId":"194","endLine":4,"endColumn":101},{"ruleId":"191","severity":1,"message":"214","line":12,"column":8,"nodeType":"193","messageId":"194","endLine":12,"endColumn":13},{"ruleId":"191","severity":1,"message":"215","line":16,"column":18,"nodeType":"193","messageId":"194","endLine":16,"endColumn":35},{"ruleId":"191","severity":1,"message":"216","line":25,"column":10,"nodeType":"193","messageId":"194","endLine":25,"endColumn":15},{"ruleId":"191","severity":1,"message":"217","line":27,"column":10,"nodeType":"193","messageId":"194","endLine":27,"endColumn":18},{"ruleId":"191","severity":1,"message":"218","line":29,"column":9,"nodeType":"193","messageId":"194","endLine":29,"endColumn":21},{"ruleId":"191","severity":1,"message":"219","line":33,"column":10,"nodeType":"193","messageId":"194","endLine":33,"endColumn":15},{"ruleId":"191","severity":1,"message":"220","line":35,"column":9,"nodeType":"193","messageId":"194","endLine":35,"endColumn":22},{"ruleId":"191","severity":1,"message":"221","line":105,"column":7,"nodeType":"193","messageId":"194","endLine":105,"endColumn":13},{"ruleId":"191","severity":1,"message":"222","line":154,"column":7,"nodeType":"193","messageId":"194","endLine":154,"endColumn":13},{"ruleId":"223","severity":1,"message":"224","line":208,"column":71,"nodeType":"225","messageId":"226","endLine":208,"endColumn":72},{"ruleId":"227","severity":1,"message":"228","line":209,"column":23,"nodeType":"225","messageId":"229","endLine":209,"endColumn":25},{"ruleId":"227","severity":1,"message":"228","line":210,"column":20,"nodeType":"225","messageId":"229","endLine":210,"endColumn":22},{"ruleId":"227","severity":1,"message":"228","line":226,"column":28,"nodeType":"225","messageId":"229","endLine":226,"endColumn":30},{"ruleId":"227","severity":1,"message":"228","line":226,"column":57,"nodeType":"225","messageId":"229","endLine":226,"endColumn":59},{"ruleId":"230","severity":1,"message":"231","line":244,"column":9,"nodeType":"225","messageId":"232","endLine":244,"endColumn":21},{"ruleId":"191","severity":1,"message":"233","line":2,"column":8,"nodeType":"193","messageId":"194","endLine":2,"endColumn":22},{"ruleId":"191","severity":1,"message":"196","line":3,"column":22,"nodeType":"193","messageId":"194","endLine":3,"endColumn":28},{"ruleId":"191","severity":1,"message":"234","line":1,"column":8,"nodeType":"193","messageId":"194","endLine":1,"endColumn":33},{"ruleId":"191","severity":1,"message":"235","line":2,"column":8,"nodeType":"193","messageId":"194","endLine":2,"endColumn":32},{"ruleId":"191","severity":1,"message":"236","line":3,"column":8,"nodeType":"193","messageId":"194","endLine":3,"endColumn":22},{"ruleId":"191","severity":1,"message":"237","line":4,"column":8,"nodeType":"193","messageId":"194","endLine":4,"endColumn":29},{"ruleId":"191","severity":1,"message":"238","line":5,"column":8,"nodeType":"193","messageId":"194","endLine":5,"endColumn":32},{"ruleId":"191","severity":1,"message":"239","line":6,"column":8,"nodeType":"193","messageId":"194","endLine":6,"endColumn":25},{"ruleId":"191","severity":1,"message":"240","line":7,"column":8,"nodeType":"193","messageId":"194","endLine":7,"endColumn":30},{"ruleId":"191","severity":1,"message":"241","line":10,"column":8,"nodeType":"193","messageId":"194","endLine":10,"endColumn":28},{"ruleId":"191","severity":1,"message":"242","line":12,"column":8,"nodeType":"193","messageId":"194","endLine":12,"endColumn":25},{"ruleId":"191","severity":1,"message":"243","line":13,"column":8,"nodeType":"193","messageId":"194","endLine":13,"endColumn":27},{"ruleId":"191","severity":1,"message":"244","line":14,"column":8,"nodeType":"193","messageId":"194","endLine":14,"endColumn":26},{"ruleId":"191","severity":1,"message":"245","line":15,"column":8,"nodeType":"193","messageId":"194","endLine":15,"endColumn":31},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'Button' is defined but never used.","'FormControl' is defined but never used.","'OutlinedInput' is defined but never used.","'InputAdornment' is defined but never used.","'SearchTwoToneIcon' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'FormHelperText' is defined but never used.","'TypographyH1' is assigned a value but never used.","'TypographyH3' is assigned a value but never used.","'OutlinedInputWrapper' is assigned a value but never used.","'TextareaAutosize' is defined but never used.","'Paper' is defined but never used.","'Dialog' is defined but never used.","'DialogTitle' is defined but never used.","'Alert' is defined but never used.","'Input' is defined but never used.","'SelectChangeEvent' is defined but never used.","'Forms' is defined but never used.","'currency' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'value' is assigned a value but never used.","'handleChange2' is assigned a value but never used.","'styles' is assigned a value but never used.","'submit' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","eqeqeq","Expected '!==' and instead saw '!='.","unexpected","no-self-compare","Comparing to itself is potentially pointless.","comparingToSelf","'AddTwoToneIcon' is defined but never used.","'DesignServicesTwoToneIcon' is defined but never used.","'BrightnessLowTwoToneIcon' is defined but never used.","'MmsTwoToneIcon' is defined but never used.","'TableChartTwoToneIcon' is defined but never used.","'AccountCircleTwoToneIcon' is defined but never used.","'BallotTwoToneIcon' is defined but never used.","'BeachAccessTwoToneIcon' is defined but never used.","'HowToVoteTwoToneIcon' is defined but never used.","'RedeemTwoToneIcon' is defined but never used.","'SettingsTwoToneIcon' is defined but never used.","'TrafficTwoToneIcon' is defined but never used.","'VerifiedUserTwoToneIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]